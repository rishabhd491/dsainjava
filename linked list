package datastructures.linkedlist;

import org.w3c.dom.Node;

/*public class LinkedList{
    private Node head;
    private Node tail;
    private int length;

    class Node{
        int value;
        Node next;
        Node(int value){
            this.value=value;
        }

    }
    public LinkedList(int value){
        Node newNode=new Node(value);
        head=newNode;
        tail=newNode;
        length=1;
    }
    public void printList(){
        Node temp=head;
        while (temp!=null){
            System.out.println(temp.value);
            temp=temp.next;
        }

    }
    public void getHead(){
        System.out.println("Head:"+head.value);
    }


}*/
public class LinkedList{
    private Node head;
    private Node tail;
    private int length;


    class Node{
        int value;
        Node next;

        Node(int value){
            this.value=value;
        }

    }

    public LinkedList(int value){
       Node newNode=new Node(value);
       head = newNode;
       tail= newNode;
       length=1;



    }
    public void printList(){
        Node temp=head;
        while(temp!=null){
            System.out.println(temp.value);
            temp=temp.next;
        }
    }
    public void getHead(){
        System.out.println("Head: "+head.value);
    }
    public void getTail(){
        System.out.println("Tail: "+tail.value);
    }
    public void getLength(){
        System.out.println("length: "+length);
    }
    //append=insert a new node at the end;
    public void append(int value){
        Node newNode=new Node(value);
        if(length==0){
            head=newNode;
            tail=newNode;
        }
        else{
            tail.next=newNode;
            tail=newNode;

        }
        length++;
    }

    public Node removeLast(){
     //we used node here not void because the value need to be return to the caller for modifications.
        if(length==0){
            return null;

        }
        Node temp=head;
        Node pre=head;
        while(temp.next!=null){
            pre =temp;
            temp=temp.next;

        }
        tail=pre;
        tail.next=null;
        length--;
        if(length==0){
            head=null;
            tail=null;
        }

        return temp;
    }
    //prepend=dd at the start
    public void prepend(int value){
        Node newNode=new Node(value);
        if(length==0){
            head=newNode;
            tail=newNode;

        }
        else{
            newNode.next=head;
            head=newNode;
        }
        length++;


    }
    public Node removeFirst(){
        if(length==0){
            return null;

        }

            Node temp=head;
            head=head.next;
            temp.next=null;
            length--;

        if(length==0){
            tail=null;
        }
        return temp;


    }
    public Node get(int index){

        if(index<0||index>=length){
            return null;
        }
        Node temp=head;
        for(int i=0;i<index;i++){
            temp=temp.next;


        }
        return temp;
    }
    public boolean set(int index,int value){
        Node temp=get(index);
        if(temp!=null){
            temp.value=value;
          return true;
        }
       return false;
    }
    public boolean insert(int index,int value){
        Node newNode=new Node(value);
        if(index<0||index>length){
            return false;
        }
        Node temp=get(index-1);
        newNode.next=temp.next;
        temp.next=newNode;
        length++;
        return true;

    }
}

