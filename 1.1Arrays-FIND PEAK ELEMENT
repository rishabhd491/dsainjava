//Naive approach
The first solution that might come into your mind is that we can traverse through the array from the second element to the second last element.
And for each element, we can check the element before and after it. 
And if both the elements are smaller than the current element then congratulations, we have our peak element. 
But before traversing the whole array we need to rule out the possibility of the first and last element being the peak element. 
To do this, we need to check the value of the second element and if this value is greater than the first element then the first element is the peak element. The same is done for the last element except for the second element we check the value of the second last element.

Code:-
// A Java program to find a peak element
import java.util.*;

class GFG {

	// Find the peak element in the array
	static int findPeak(int arr[], int n)
	{
		// First or last element is peak element
		if (n == 1)
			return 0;
		if (arr[0] >= arr[1])
			return 0;
		if (arr[n - 1] >= arr[n - 2])
			return n - 1;
		// Check for every other element
		for (int i = 1; i < n - 1; i++) {
			// Check if the neighbors are smaller
			if (arr[i] >= arr[i - 1] && arr[i] >= arr[i + 1])
				return i;
		}
		return 0;
	}

	// Driver Code
	public static void main(String[] args)
	{
		int arr[] = { 1, 3, 20, 4, 1, 0 };
		int n = arr.length;
		System.out.print("Index of a peak point is " + findPeak(arr, n));
	}
}




